// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL_TEST")
}

model User {
  id      String      @id @default(cuid())
  firstName String
  lastName String
  email   String   @unique
  emailToken String @unique @default(cuid())
  emailVerified DateTime? 
  password String
  role Role @default(USER)

  plan Plan @default(FREE)
  stripeCustomerId String?
  stripeSubscriptionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favorites Favorite[]
  alertes Alert[]
}

enum Plan {
  FREE
  BASIC
  PREMIUM
}

enum Role {
  USER
  ADMIN
}

model Category {
  id      Int      @id @default(autoincrement())
  name String
  description String
  products Product[]
}

model Product {
  id      Int      @id @default(autoincrement())
  title String?
  description String?
  image Bytes @db.LongBlob
  rating Float?
  price Float?
  lowestPrice Float?
  highestPrice Float?
  quantity String?
  brand String
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId Int
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Favorite[]
  alertes Alert[]
}

model Favorite {
  id      Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alert {
  id      Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id      Int      @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}