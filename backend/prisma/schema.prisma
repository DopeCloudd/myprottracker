// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL_TEST")
}

model User {
  id      String      @id @default(cuid())
  firstName String
  lastName String
  email   String   @unique
  emailToken String @unique @default(cuid())
  emailVerified DateTime? 
  password String
  role Role @default(USER)

  plan Plan @default(FREE)
  stripeCustomerId String? @unique
  subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favorites Favorite[]
  alertes Alert[]
  requests Request[]
}

enum Plan {
  FREE
  PREMIUM
}

enum Role {
  USER
  ADMIN
}

model Subscription {
  id      String      @id @default(cuid()) @map("_id")
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  startDate DateTime @default(now()) 
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      Int      @id @default(autoincrement())
  name String
  description String
  products Product[]
}

model Brand {
  id      Int      @id @default(autoincrement())
  name String
  products Product[]
}

model Product {
  id      Int      @id @default(autoincrement())
  title String?
  description String? @db.LongText
  image Bytes @db.LongBlob
  rating Float?
  price Float?
  lowestPrice Float?
  highestPrice Float?
  quantity String?
  brand Brand? @relation(fields: [brandId], references: [id])
  brandId Int
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId Int
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favorites Favorite[]
  alertes Alert[]
  nutrition Nutrition[]
  updates Update[]
  queuMails QueuMail[]
}

model Favorite {
  id      Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alert {
  id      Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id      Int      @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Nutrition {
  id      Int      @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int @unique
  calories Float?
  fat Float?
  saturedFat Float?
  fiber Float?
  sugar Float?
  protein Float?
  salt Float?
  carbohydrates Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id      Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  url String
  status RequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REFUSED
}

model Update {
  id      Int      @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  record String
  oldValue String
  newValue String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QueuMail {
  id      Int      @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  status MailStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MailStatus {
  PENDING
  SENT
  ERROR
}

model MailHistory {
  id      Int      @id @default(autoincrement())
  email String
  type String
  status MailStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}